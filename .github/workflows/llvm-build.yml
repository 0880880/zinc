name: LLVM Build

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Dependencies
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt update
            sudo apt install -y build-essential ninja-build clang cmake binutils-gold git
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install ninja llvm cmake git
            export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install llvm cmake ninja
            # git is pre-installed on Windows runners
          fi

      - name: Checkout & Clone LLVM monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for full history if you later tag or checkout specific versions
      - name: Clone LLVM/Clang
        shell: bash
        run: |
          git clone --depth=1 --branch=main https://github.com/llvm/llvm-project.git

      - name: Configure & Build
        shell: bash
        run: |
          cd llvm-project
          mkdir build install
          cd build
          LINKER_FLAGS=""
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            LINKER_FLAGS="-DCMAKE_LINKER=/usr/bin/ld.gold"
          fi
          cmake -G Ninja ../llvm \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="clang" \
            -DLLVM_TARGETS_TO_BUILD="host" \
            -DCMAKE_INSTALL_PREFIX=../install \
            $LINKER_FLAGS
          ninja
          ninja install

      - name: Gather only shared libraries
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir shared
          # collect .so (and versioned .so.*) and .dylib
          find llvm-project/install -type f \( -name "*.so*" -o -name "*.dylib" \) \
                                 -exec cp --parents {} shared/ \;

      - name: Gather only DLLs on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path shared | Out-Null
          Get-ChildItem llvm-project/install -Filter *.dll -Recurse |
            Copy-Item -Destination shared -Container

      - name: Upload shared‚Äêlibrary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ matrix.os }}-${{ matrix.arch }}-shared
          path: shared/

